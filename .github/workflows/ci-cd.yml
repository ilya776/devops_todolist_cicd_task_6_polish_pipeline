name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Choose which artifact from the matrix to deploy'
        required: true
        default: 'ubuntu-3.9'
        type: choice
        options:
          - 'ubuntu-3.8'
          - 'ubuntu-3.9'
          - 'windows-3.8'
          - 'windows-3.9'
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - 'development'
          - 'staging'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/todolist-app

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install pytest pytest-django

    - name: Run tests
      working-directory: ./src
      run: |
        python manage.py test

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: test-results/

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ['3.8', '3.9']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=python${{ matrix.python-version }}-{{sha}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{ matrix.python-version }}
        path: |
          docker-image-info.txt
        retention-days: 30

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.todolist.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment target
      id: deploy-target
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TARGET="${{ github.event.inputs.deploy_target }}"
          echo "Using manual target: $TARGET"
          # Extract Python version from target (e.g., ubuntu-3.9 -> 3.9)
          PYTHON_VERSION=$(echo $TARGET | grep -o '[0-9]\.[0-9]')
          echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        else
          echo "python-version=3.9" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Development
      run: |
        echo "Deploying to development environment..."
        echo "Using image: ${{ env.DOCKER_IMAGE_NAME }}:python${{ steps.deploy-target.outputs.python-version }}-${{ github.sha }}"
        echo "Deploy target: ${{ github.event.inputs.deploy_target || 'ubuntu-3.9' }}"
        # Add your deployment commands here
        echo "Development deployment completed successfully!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.todolist.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment target
      id: deploy-target
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TARGET="${{ github.event.inputs.deploy_target }}"
          echo "Using manual target: $TARGET"
          # Extract Python version from target (e.g., ubuntu-3.9 -> 3.9)
          PYTHON_VERSION=$(echo $TARGET | grep -o '[0-9]\.[0-9]')
          echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        else
          echo "python-version=3.9" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        echo "Using image: ${{ env.DOCKER_IMAGE_NAME }}:python${{ steps.deploy-target.outputs.python-version }}-${{ github.sha }}"
        echo "Deploy target: ${{ github.event.inputs.deploy_target || 'ubuntu-3.9' }}"
        # Add your deployment commands here
        echo "Staging deployment completed successfully!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy-development, deploy-staging]
    if: always()

    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.build-and-push.result == 'success'
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "Tests passed on all matrix combinations"
        echo "Docker images built and pushed successfully"

    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        echo "Check the logs for more details"
